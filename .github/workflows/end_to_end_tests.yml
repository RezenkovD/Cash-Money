name: end_to_end_tests

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install postgresql postgresql-contrib -y
        sudo service postgresql start
        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB }};"
        sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD ${{ secrets.POSTGRES_PASSWORD }};"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.POSTGRES_DB }} TO  ${{ secrets.POSTGRES_USER }};"

    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with Pytest
      run: |
        pytest --cov-report=xml --cov=src tests/
      env:
        CI: true
        PYTHONPATH: ${{ secrets.PYTHONPATH }}
        APP_HOST: ${{ secrets.APP_HOST }}
        APP_PORT: ${{ secrets.APP_PORT }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        SERVER_METADATA_URL: ${{ secrets.SERVER_METADATA_URL }}
        SQLALCHEMY_DATABASE_URI: ${{ secrets.SQLALCHEMY_DATABASE_URI }}

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: pytest-coverage
        path: |
          ./coverage.xml

    - name: Check code formatting with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      run: |
        black --check --verbose .

    - name: Check coverage
      run: |
        export coverage=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1 | awk '{print $1 * 100}')
        echo "Code coverage: $coverage%"
        if (( $(echo "$coverage < 75" | bc -l) )); then
          echo "Code coverage is less than 75%: $coverage%"
          exit 1
        fi
